#!/usr/bin/env node

/**
 * This is the main entry when you type kuzzle start command
 *
 * If you want to run a Kuzzle instance using PM2,
 * take a look at the app-start.js file instead
 */
var program = require('commander');

// $ kuzzle start
program
  .command('start')
  .option('--port <port>', 'Kuzzle port number', parseInt)
  .option('--server', 'start an instance without workers')
  .option('--worker', 'spawn a single set of workers instead of starting a Kuzzle instance')
  .option('--likeAvirgin', 'reset before start, so that Kuzzle is like a virgin, touched for the very first time')
  .option('--fixtures <fixtures>', 'allow you to load a fixtures file')
  .option('--mappings <mappings>', 'allow you to load and apply a mappings file')
  .description('Start a Kuzzle instance')
  .action(require('./commands/start'));

// $ kuzzle enable <service>
program
  .command('enable')
  .option('--pid <pid>', '[all|integer] the pid to apply the action - required')
  .description('Enable a service without reloading Kuzzle')
  .action(require('./commands/enable'));

// $ kuzzle.js disable <service>
program
  .command('disable')
  .option('--pid <pid>', '[all|integer] the pid to apply the action - required option')
  .description('Disable a service without reloading Kuzzle')
  .action(require('./commands/disable'));

// $ kuzzle install
program
  .command('install')
  .arguments('[plugin]')
  .description(`Install plugins if necessary, and refresh their configuration.
  If no argument is supplied, install and refresh all plugins.

  Otherwise, install & refresh a specific plugin using --version, --url or --path option.
  The --version, --url and --path are mutually exclusive`)
  .option('-v, --version <version>', 'Install plugin <version> from NPM')
  .option('-u, --url <url>', 'Install plugin from a GIT repo <url>')
  .option('-p, --path <path>', 'Install a plugin from directory <path>')
  .option('-a, --activated', 'Activate the plugin (when a new plugin is installed, it is deactivated by default)')
  .action(require('./commands/install'));

// $ kuzzle createFirstAdmin
program
  .command('createFirstAdmin')
  .description('Create the first administrator')
  .action(require('./commands/createFirstAdmin').action);

// $ kuzzle likeAvirgin
program
  .command('likeAvirgin')
  .option('--pid <pid>', '[all|integer] the pid to apply the action - mandatory option')
  .option('--fixtures <fixtures>', 'allow you to specify a fixtures file')
  .option('--mappings <mappings>', 'allow you to specify a mappings file')
  .option('--noint', 'non interractive mode, will perform the reset immediately')
  .description('Empty all the Kuzzle storage and make it look like a virgin, touched for the very first time')
  .action(require('./commands/reset'));  

// Run user command
program.parse(process.argv);

/*
  Workaround for a bug in commander: program.args.length is empty if a sub-command is executed with
  a flag as the last option before an argument.
  For instance: "kuzzle install -a plugin" will incorrectly trigger the help and exit

  This is still true with commander v2.2
 */
if (program.rawArgs.length <= 2) {
  program.help();
}
